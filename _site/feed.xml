<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-18T11:29:01+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">🫧</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">终端命令</title><link href="http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4.html" rel="alternate" type="text/html" title="终端命令" /><published>2022-11-17T00:00:00+08:00</published><updated>2022-11-17T00:00:00+08:00</updated><id>http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4.html"><![CDATA[<h3 id="目录操作">目录操作</h3>

<table>
  <thead>
    <tr>
      <th>cmd</th>
      <th>source</th>
      <th>description</th>
      <th>example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>mkdir</td>
      <td>make</td>
      <td>创建一个目录</td>
      <td>mkdir dir</td>
    </tr>
    <tr>
      <td>rmdir</td>
      <td>remove</td>
      <td>删除一个目录</td>
      <td>rmdir dir</td>
    </tr>
    <tr>
      <td>mv</td>
      <td>move</td>
      <td>移动或重命名一个目录或文件</td>
      <td>mv dir1 dir2</td>
    </tr>
    <tr>
      <td>cd</td>
      <td>–</td>
      <td>改变当前目录</td>
      <td>cd dir</td>
    </tr>
    <tr>
      <td>ls</td>
      <td>–</td>
      <td>显示当前目录的内容</td>
      <td>ls</td>
    </tr>
    <tr>
      <td>cmp</td>
      <td>compare</td>
      <td>比较两个文件是否有差异</td>
      <td>cmp 01.js 02.js</td>
    </tr>
  </tbody>
</table>

<h3 id="文件操作">文件操作</h3>

<table>
  <thead>
    <tr>
      <th>cmd</th>
      <th>source</th>
      <th>description</th>
      <th>example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>cat</td>
      <td>–</td>
      <td>显示或连接文件</td>
      <td>cat 01.js</td>
    </tr>
    <tr>
      <td>more</td>
      <td>–</td>
      <td>查看比价大的文件，可翻页，Q退出后，且查看的内容保留在终端</td>
      <td>more 01.js</td>
    </tr>
    <tr>
      <td>less</td>
      <td>–</td>
      <td>查看比较大的文件，可翻页，Q退出后，查看的内容不会保留在终端</td>
      <td>less 01.js</td>
    </tr>
    <tr>
      <td>od</td>
      <td>–</td>
      <td>读取指定文件，并将内容以八进制字码呈现</td>
      <td>od 01.js</td>
    </tr>
    <tr>
      <td>cp</td>
      <td>copy</td>
      <td>复制文件内容 ｜ cp 01.js 02.js</td>
      <td> </td>
    </tr>
    <tr>
      <td>rm</td>
      <td>remove</td>
      <td>删除文件或目录,欲删除目录，需加上-rf参数</td>
      <td>rm -rf dir</td>
    </tr>
    <tr>
      <td>mv</td>
      <td>–</td>
      <td>移动或重命名一个目录或文件（第二个参数文件或目录存在就是移动， 不存在就是重命名）</td>
      <td>mv 01.js 02</td>
    </tr>
    <tr>
      <td>ln</td>
      <td>link</td>
      <td>链接文件或目录</td>
      <td>ln 01.js 04.js</td>
    </tr>
    <tr>
      <td>find</td>
      <td>–</td>
      <td>查找文件或目录</td>
      <td>find . -name ‘*.js’ <a href="#find">详解</a></td>
    </tr>
    <tr>
      <td>open</td>
      <td>–</td>
      <td>使用默认程序打开文件</td>
      <td>open 01.js</td>
    </tr>
  </tbody>
</table>

<p><a name="find"></a></p>

<h3 id="find-命令详解">find 命令详解</h3>

<h4 id="一find-命令语法格式">一、find 命令语法格式</h4>

<p>find[路径][选项][操作]<br />
选项参数对照表</p>

<table>
  <thead>
    <tr>
      <th>选项</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-name</td>
      <td>根据文件名查找</td>
    </tr>
    <tr>
      <td>-perm</td>
      <td>根据文件权限查找</td>
    </tr>
    <tr>
      <td>-prune</td>
      <td>该选项可以排出某些查找目录</td>
    </tr>
    <tr>
      <td>-user</td>
      <td>根据文件属主查找</td>
    </tr>
    <tr>
      <td>-group</td>
      <td>根据文件属组查找</td>
    </tr>
    <tr>
      <td>-minute -n｜+n</td>
      <td>根据文件更改时间查找</td>
    </tr>
    <tr>
      <td>-type</td>
      <td>按文件类型查找</td>
    </tr>
    <tr>
      <td>-size -n｜+n</td>
      <td>按文件大小查找</td>
    </tr>
    <tr>
      <td>-mindepth n</td>
      <td>从n级子目录开始搜索</td>
    </tr>
    <tr>
      <td>-maxdepth n</td>
      <td>最多搜索到n级子目录</td>
    </tr>
  </tbody>
</table>

<h4 id="二常用选型详解">二、常用选型详解</h4>

<p>-name 查找/etc目录下以conf结尾的文件，文件名区分大小写 find /etc -name ‘*.conf’<br />
-iname 同-name,忽略大小写<br />
-user 查找文件所属用户为 zhangsan 的文件 find . -user zhangsan<br />
-group   查找文件所属组为 dev 的所有文件，例如：find . -group dev<br />
-type　　根据类型查找：如下</p>

<p>　　　　　　f　　 文件　　　　　　　　find . -type f</p>

<p>　　　　　　d　　目录　　　　　　　　find . -type d</p>

<p>　　　　　　c　　字符设备文件　　　　find . -type c</p>

<p>　　　　　　b　　块设备文件　　　　　find . -type b</p>

<p>　　　　　　l　　 链接文件　　　　　　find . -type l</p>

<p>　　　　　　p　　管道文件　　　　　　find . -type p</p>

<p>-size　   根据文件大小查询</p>

<p>　　　　  -n　　小于 大小为 n 的文件</p>

<p>　　　　  +n　　大于 大小为 n 的文件</p>

<p>　　　　　举例1：查找 /ect 目录下，小于 10000 字节的文件。 find /etc -size +10000c</p>

<p>　　　　　举例2：查找 /etc 目录下，大于 1M 的文件。find /etc -size -1M</p>

<p>-mtime　　</p>

<p>　　　　　-n　　n 天以内修改的文件。</p>

<p>　　　　　+n　　n 天以外修改的文件。</p>

<p>　　　　　n　　  正好 n天 修改的文件</p>

<p>　　　　　举例1: 查询 /etc 目录下，5天以内修改 且以 conf 结尾的文件。　find /etc -mtime -5 -name ‘*.conf’</p>

<p>　　　　　举例2: 查询 /etc 目录下，10天之前修改，且属于 yangyang 的文件。　　find /etc -mtime +10 -user yangyang</p>

<p>-mmin　　</p>

<p>　　　　　-n　　n 分钟以内修改过的文件</p>

<p>　　　　　+n　　n 分钟之前修改过的文件</p>

<p>　　　　　举例1: 查询 /etc 目录下 30分钟 之前修改过的文件。 　　find /etc -mmin +30</p>

<p>　　　　　举例1: 查询 /etc 目录下 30分钟 之前修改过的目录。 　　find /etc -mmin -30 -type d</p>

<p>-mindepth n　　从第 n 级目录开始搜索</p>

<p>　　　　　举例：从 /etc 的第三级子目录开始搜索。  find /etc -mindepth 3</p>

<p>-maxdepth n　　表示至多搜索到第 n-1 级子目录。</p>

<p>　　　　　举例1: 在 /etc 中搜索符合条件的文件，但最多搜索到 2级 子目录。　　find /etc -maxdepth 3 -name ‘*.conf’</p>

<p>　　　　　举例2: find /etc -type f -name ‘*.conf’ -size +10k -maxdepthc 2</p>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="terminal" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">项目代码风格统一</title><link href="http://localhost:4000/2022/11/17/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html" rel="alternate" type="text/html" title="项目代码风格统一" /><published>2022-11-17T00:00:00+08:00</published><updated>2022-11-17T00:00:00+08:00</updated><id>http://localhost:4000/2022/11/17/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</id><content type="html" xml:base="http://localhost:4000/2022/11/17/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"><![CDATA[<h3 id="一集成editorconfig配置">一、集成editorconfig配置</h3>
<p><a href="http://editorconfig.org">Editorconfig</a> 可以帮助同一项目的多个开发人员维护一致的代码风格。</p>

<p>vscode 需要安装插件EditorConfig for VS Code</p>

<p>在根目录创建.editorconfig文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># http://editorconfig.org

root = true

[*] # 表示所有文件适用
charset = utf-8 # 设置文件字符集为 utf-8
indent_style = space # 缩进风格（tab | space）
indent_size = 2 # 缩进大小
end_of_line = lf # 控制换行类型(lf | cr | crlf)
trim_trailing_whitespace = true # 去除行首的任意空白字符
insert_final_newline = true # 始终在文件末尾插入一个新行

[*.md] # 表示仅 md 文件适用以下规则
max_line_length = off
trim_trailing_whitespace = false
</code></pre></div></div>

<h3 id="二使用prettier工具">二、使用prettier工具</h3>

<p><a href="https://www.prettier.cn/">Prettier</a> 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p>

<p>1、安装prettier</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">prettier</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>2、配置.prettier文件</p>

<ul>
  <li>useTabs：使用tab缩进还是空格缩进，选择false；</li>
  <li>tabWidth：tab是空格的情况下，是几个空格，选择2个；</li>
  <li>printWidth：当行字符的长度，推荐80，也有人喜欢100或者120；</li>
  <li>singleQuote：使用单引号还是双引号，选择true，使用单引号；</li>
  <li>trailingComma：在多行输入的尾逗号是否添加，设置为 none；</li>
  <li>semi：语句末尾是否要加分号，默认值true，选择false表示不加；</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">useTabs</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">tabWidth</span><span class="dl">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">printWidth</span><span class="dl">"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">singleQuote</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">trailingComma</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">none</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">semi</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div></div>

<p>3、创建.prettierignore忽略文件</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="nx">dist</span><span class="cm">/*
.local
.output.js
/node_modules/**

**/</span><span class="o">*</span><span class="p">.</span><span class="nx">svg</span>
<span class="o">**</span><span class="cm">/*.sh

/public/*
</span></code></pre></div></div>

<p>4、VSCode 需要安装prettier - Code formatter 插件</p>

<p>5、测试prettier是否生效</p>
<ul>
  <li>测试一：在编辑器中保存代码</li>
  <li>测试二：配置一次性修改命令(此方法也可在接手一个旧项目时，统一一次性全局format，统一项目代码风格。注意还需要配置对应的lint检测)</li>
</ul>

<p>在package.json文件中配置scripts</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">prettier</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">prettier --write .</span><span class="dl">"</span>
</code></pre></div></div>

<p>执行npm run prettier 将项目中所有代码格式化</p>

<h4 id="三使用eslint检测">三、使用ESLint检测</h4>

<p>1、安装eslint</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">eslint</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>2、VSCode 安装ESLint插件
3、解决eslint和prettier冲突的问题</p>

<p>安装插件</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">eslint</span><span class="o">-</span><span class="nx">plugin</span><span class="o">-</span><span class="nx">prettier</span> <span class="nx">eslint</span><span class="o">-</span><span class="nx">config</span><span class="o">-</span><span class="nx">prettier</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>然后在.eslintrc.js文件中添加以下配置：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">extends</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
		<span class="dl">"</span><span class="s2">plugin:prettier/recommended</span><span class="dl">"</span> <span class="c1">// 添加到数组的最后一个元素</span>
	<span class="p">]</span>
<span class="p">}</span>

</code></pre></div></div>

<p>4、在VSCode设置中勾选Format On Save</p>

<h4 id="四git-husky和eslint">四、git Husky和eslint</h4>

<p>虽然我们已经要求项目使用eslint了，但是不能保证组员提交代码之前都将eslint中的问题解决掉了:</p>

<ul>
  <li>也就是我们希望保证代码仓库中的代码都是符合eslint规范的；</li>
  <li>那么我们需要在组员执行 git commit 命令的时候对其进行校验，如果不符合eslint规范，那么自动通过规范进行修复；</li>
</ul>

<p>那么如何做到这一点呢？可以通过Husky工具：</p>

<ul>
  <li>husky是一个git hook工具，可以帮助我们触发git提交的各个阶段：pre-commit、commit-msg、pre-push</li>
</ul>

<p>如何使用husky呢？</p>

<p>这里我们可以使用自动配置命令：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">husky</span><span class="o">-</span><span class="nx">init</span> <span class="o">&amp;&amp;</span> <span class="nx">npm</span> <span class="nx">install</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">lint</span><span class="o">-</span><span class="nx">staged</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>这里会做三件事：
1.安装husky相关的依赖：
2.在项目目录下创建 .husky 文件夹：
3.在package.json中添加一个脚本：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">prepare</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">husky install</span><span class="dl">"</span>
</code></pre></div></div>
<p>接下来，我们需要去完成一个操作：在进行commit时，执行lint脚本，在package.json 中配置</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">husky</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">hooks</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">pre-commit</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lint-staged</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">lint-staged</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">**/*.less</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stylelint --syntax less</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">**/*.{js,jsx,ts,tsx}</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npm run lint-staged:js</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">**/*.{js,jsx,tsx,ts,less,md,json}</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">"</span><span class="s2">prettier --write</span><span class="dl">"</span>
    <span class="p">]</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个时候我们执行git commit的时候会自动对代码进行lint校验。</p>

<h4 id="五git-commit-规范">五、git commit 规范</h4>

<p>1、代码提交风格</p>

<p>通常我们的git commit会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p>

<p>Commitizen 是一个帮助我们编写规范 commit message 的工具</p>

<p>1、安装Commitizen</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">commitizen</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>2、安装cz-conventional-changelog，并且初始化cz-conventional-changelog：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">commitizen</span> <span class="nx">init</span> <span class="nx">cz</span><span class="o">-</span><span class="nx">conventional</span><span class="o">-</span><span class="nx">changelog</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">exact</span>
</code></pre></div></div>

<p>并且在package.json中进行配置：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">config</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">commitizen</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./node_modules/cz-conventional-changelog</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">},</span>
</code></pre></div></div>

<p>这个时候我们提交代码需要使用 npx cz：</p>

<ul>
  <li>第一步是选择type，本次更新的类型</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>feat</td>
      <td>新增特性(feature)</td>
    </tr>
    <tr>
      <td>fix</td>
      <td>修复Bug(bug fix)</td>
    </tr>
    <tr>
      <td>doc</td>
      <td>修改文档(documentation)</td>
    </tr>
    <tr>
      <td>style</td>
      <td>代码格式修改(white-space,formatting,missing semi colons, etc)</td>
    </tr>
    <tr>
      <td>refactor</td>
      <td>代码重构(refactor)</td>
    </tr>
    <tr>
      <td>perf</td>
      <td>改善性能(A code change that improve performance)</td>
    </tr>
    <tr>
      <td>test</td>
      <td>测试(when adding missing tests)</td>
    </tr>
    <tr>
      <td>build</td>
      <td>变更项目构建或外部依赖(例如：scopes: webpack, gulp, webpack 等)</td>
    </tr>
    <tr>
      <td>ci</td>
      <td>更改持续集成软件的配置文件和 package 中的 script 命令</td>
    </tr>
    <tr>
      <td>chore</td>
      <td>变更构建流程或辅助工具(比如更改测试环境)</td>
    </tr>
    <tr>
      <td>revert</td>
      <td>代码回退</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>第二步选择本次修改的范围（作用域）</p>
  </li>
  <li>
    <p>第三步选择提交的信息</p>
  </li>
  <li>
    <p>第四步提交详细的描述信息</p>
  </li>
  <li>
    <p>第五步是否是一次重大的更改</p>
  </li>
  <li>
    <p>第六步是否影响某个open issue</p>
  </li>
</ul>

<p>我们也可以在scripts中构建一个命令来执行 cz：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">commit</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">git-cz</span><span class="dl">"</span>
</code></pre></div></div>
<p>2、 代码提交验证</p>

<p>如果我们按照cz来规范了提交风格，但是依然有同事通过 git commit 按照不规范的格式提交应该怎么办呢？</p>

<p>我们可以通过commitlint来限制提交；</p>

<p>1、安装 @commitlint/config-conventional 和 @commitlint/cli</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">npm</span> <span class="nx">i</span> <span class="p">@</span><span class="nd">commitlint</span><span class="sr">/config-conventional @commitlint/</span><span class="nx">cli</span> <span class="o">-</span><span class="nx">D</span>
</code></pre></div></div>

<p>2、在根目录创建commitlint.config.js文件，配置commitlint</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">extends</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">@commitlint/config-conventional</span><span class="dl">'</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>3、使用husky生成commit-msg文件，验证提交信息：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">husky</span> <span class="nx">add</span> <span class="p">.</span><span class="nx">husky</span><span class="o">/</span><span class="nx">commit</span><span class="o">-</span><span class="nx">msg</span> <span class="dl">"</span><span class="s2">npx --no-install commitlint --edit $1</span><span class="dl">"</span>
</code></pre></div></div>
<p>直接使用git commit 提交, 在husky hook  中添加</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">commit-msg</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">commitlint -E HUSKY_GIT_PARAMS</span><span class="dl">"</span>
</code></pre></div></div>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="工具" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-09-28T16:16:38+08:00</published><updated>2022-09-28T16:16:38+08:00</updated><id>http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Vim</title><link href="http://localhost:4000/2022/09/28/vim.html" rel="alternate" type="text/html" title="Vim" /><published>2022-09-28T00:00:00+08:00</published><updated>2022-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2022/09/28/vim</id><content type="html" xml:base="http://localhost:4000/2022/09/28/vim.html"><![CDATA[<p>–
layout: post
title: Mac OS 环境变量配置
date: 2022-09-28
description: …..
img: post-6.jpg # Add image post (optional)
tags: [Blog, vscode]
author: wangzm
–</p>

<p>TODO</p>
<ul>
  <li>终端输入 vim ~/.bash_profile</li>
  <li>输入 i 进入编辑模式，然后输入环境变量：</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="dl">"</span><span class="s2">$M2_HOME/bin:$PATH</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>编辑完成后，按 Esc 退出编辑，输入 :wq! 保存并退出</li>
  <li>输入 source .bash_profile 使环境变量生效</li>
  <li>终端输入 echo $PATH 查看当前环境变量，检查添加的变量是否生效</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[– layout: post title: Mac OS 环境变量配置 date: 2022-09-28 description: ….. img: post-6.jpg # Add image post (optional) tags: [Blog, vscode] author: wangzm –]]></summary></entry><entry><title type="html">vscode 实用插件记录</title><link href="http://localhost:4000/2022/05/12/vsCodeTool%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6.html" rel="alternate" type="text/html" title="vscode 实用插件记录" /><published>2022-05-12T00:00:00+08:00</published><updated>2022-05-12T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/12/vsCodeTool%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6</id><content type="html" xml:base="http://localhost:4000/2022/05/12/vsCodeTool%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6.html"><![CDATA[<p>TODO</p>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="vscode" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">快速访问 GitHub</title><link href="http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520.html" rel="alternate" type="text/html" title="快速访问 GitHub" /><published>2022-05-12T00:00:00+08:00</published><updated>2022-05-12T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520</id><content type="html" xml:base="http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520.html"><![CDATA[<p>TODO 解锁更多使用姿势</p>
<ul>
  <li>下载 <a href="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md">SwitchHosts</a></li>
  <li>配置添加 Hosts
https://cdn.jsdelivr.net/gh/521xueweihan/GitHub520
<img src="/assets/img/github-hosts.png" alt="配置host" /></li>
  <li>使用时打开即可
<img src="/assets/img/github-open.png" alt="打开" /></li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="github" /><summary type="html"><![CDATA[SwitchHost 和 GitHub520 自动更新 github.com hosts]]></summary></entry><entry><title type="html">GIT RESET 操作</title><link href="http://localhost:4000/2019/10/17/gitReset-%E6%93%8D%E4%BD%9C.html" rel="alternate" type="text/html" title="GIT RESET 操作" /><published>2019-10-17T00:00:00+08:00</published><updated>2019-10-17T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/17/gitReset%20%E6%93%8D%E4%BD%9C</id><content type="html" xml:base="http://localhost:4000/2019/10/17/gitReset-%E6%93%8D%E4%BD%9C.html"><![CDATA[<h1 id="git-撤销">git 撤销</h1>

<ul>
  <li>git Add
git restore –staged <文件>..." 以取消暂存</文件></li>
  <li>git commit
    <ul>
      <li>git commit 未 push, 可用 git commit –amend 修改提交信息</li>
      <li>git reset HEAD^ 或 git reset HEAD~1</li>
    </ul>
  </li>
  <li>git push
    <ul>
      <li>git revert XXXXXX[git commit id] 生成一个与要撤销的 commit 相反的一个 commit，提交上去即可，安全。</li>
      <li>git reset [版本号] –hard 会抛弃当前工作区域的修改， –soft 会回退到之前的版本，保留当前工作区域的修改。
再 git push origin [分支名] –force 覆盖掉远端的版本信息，使远端的仓库也回退相应版本</li>
    </ul>
  </li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="git" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">vue-cli 3代码压缩去掉 console.log 信息</title><link href="http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin.html" rel="alternate" type="text/html" title="vue-cli 3代码压缩去掉 console.log 信息" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin</id><content type="html" xml:base="http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin.html"><![CDATA[<p>默认的 vue-cli 3 配置项，打包的 JS 代码，并不会去掉 console 信息，经过查文档，终于搞定。
增加 vue.config.js 的配置项， 使用 uglifyjs-webpack-plugin 压缩代码.此处调试的时候要记得清除浏览器缓存，否则可能已经配置正确了，因为浏览器的缓存机制导致看到的效果不正确。</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">uglifyjs</span><span class="o">-</span><span class="nx">webpack</span><span class="o">-</span><span class="nx">plugin</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
<span class="c1">// vue.config.js </span>
<span class="nx">cosnt</span> <span class="nx">UglifyJsPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">uglify-webpack-plugin</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">// 增加 configureWebpack， 该对象会被 webpack-merge 合并入最终的 webpack 配置</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">configureWebpack</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">optimization</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">minimizer</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">UglifyJsPlugin</span><span class="p">({</span>
          <span class="na">uglifyOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
              <span class="na">drop_console</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span><span class="c1">//console</span>
              <span class="na">pure_funcs</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">console.log</span><span class="dl">'</span><span class="p">]</span>
            <span class="p">}</span>
          <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>uglifyOptions 配置项看<a href="'https://github.com/mishoo/UglifyJS2#minify-options'">这里</a></li>
  <li>compress 配置项看<a href="'https://github.com/mishoo/UglifyJS2#compress-options'">这里</a></li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="vue-cli" /><summary type="html"><![CDATA[You will find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry><entry><title type="html">git stash</title><link href="http://localhost:4000/2018/09/28/gitstash.html" rel="alternate" type="text/html" title="git stash" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/28/gitstash</id><content type="html" xml:base="http://localhost:4000/2018/09/28/gitstash.html"><![CDATA[<p>当在一个分支上工作一段时间之后，需要临时切换到其它分支上，但是当前的工作还没完成一个功能点，为了避免增加没有意义的提交信息，可以先把当前工作区域的内容储藏起来，切换到其它分支，完成之后再切换回当前分支。</p>
<ul>
  <li>git stash / git stash save 内容储藏起来。项目回到上次提交完成时候的干净状态。</li>
  <li>git stash  –keep-index 告诉 git 不要存储通过 git add 命令暂存的东西
(不太明白，用起来感觉跟 git stash 一样)</li>
  <li>git stash –include-untracked / git stash -u , 告诉 git 暂存创建的未跟踪的文件</li>
  <li>git stash –patch 交互式提示文件的修改</li>
  <li>git stash branch testChanges 把储藏空间的内容座位一份新的分支处理，处理完成之后可以把储藏空间的内容清除掉</li>
  <li>git stash list 查看储存空间的列表</li>
  <li>git stash pop 把储存空间最新的一次存储取出来</li>
  <li>git stash apply stash@{0} 取出指定的储存信息</li>
  <li>git stash drop stash@{0} 把指定的储存从栈里清除</li>
  <li>git clean 从工作目录中移除未被追踪的文件,慎重使用，具体使用具体查看文档。
    <ul>
      <li>git clean -d -f 强制移除</li>
      <li>git clean -d -n 做一次演示，告诉你要移除什么</li>
      <li>任何与 .gitignore 或其它忽略文件相匹配的文件都不会被移除。如果这些文件也想要移除， git clean -d -n -x</li>
    </ul>
  </li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="git" /><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry><entry><title type="html">webpack proxyTable 代理转发配置</title><link href="http://localhost:4000/2018/09/25/proxyTable.html" rel="alternate" type="text/html" title="webpack proxyTable 代理转发配置" /><published>2018-09-25T00:00:00+08:00</published><updated>2018-09-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/25/proxyTable</id><content type="html" xml:base="http://localhost:4000/2018/09/25/proxyTable.html"><![CDATA[<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">proxyTable</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">target</span><span class="p">:</span> <span class="dl">'</span><span class="s1">www.app1.com:8001</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">changeOrigin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">pathRewrite</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">^/api</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/index/index</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>当请求‘/api/login’,实际上请求的是‘www.app1.com:8001/index/index/login’</li>
</ul>]]></content><author><name>wangzm</name></author><category term="wx" /><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry></feed>