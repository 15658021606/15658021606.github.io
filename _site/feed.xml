<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-17T16:52:54+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">🫧</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">终端命令</title><link href="http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4.html" rel="alternate" type="text/html" title="终端命令" /><published>2022-11-17T00:00:00+08:00</published><updated>2022-11-17T00:00:00+08:00</updated><id>http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/2022/11/17/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4.html"><![CDATA[<h3 id="目录操作">目录操作</h3>

<table>
  <thead>
    <tr>
      <th>cmd</th>
      <th>source</th>
      <th>description</th>
      <th>example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>mkdir</td>
      <td>make</td>
      <td>创建一个目录</td>
      <td>mkdir dir</td>
    </tr>
    <tr>
      <td>rmdir</td>
      <td>remove</td>
      <td>删除一个目录</td>
      <td>rmdir dir</td>
    </tr>
    <tr>
      <td>mv</td>
      <td>move</td>
      <td>移动或重命名一个目录或文件</td>
      <td>mv dir1 dir2</td>
    </tr>
    <tr>
      <td>cd</td>
      <td>–</td>
      <td>改变当前目录</td>
      <td>cd dir</td>
    </tr>
    <tr>
      <td>ls</td>
      <td>–</td>
      <td>显示当前目录的内容</td>
      <td>ls</td>
    </tr>
    <tr>
      <td>cmp</td>
      <td>compare</td>
      <td>比较两个文件是否有差异</td>
      <td>cmp 01.js 02.js</td>
    </tr>
  </tbody>
</table>

<h3 id="文件操作">文件操作</h3>

<table>
  <thead>
    <tr>
      <th>cmd</th>
      <th>source</th>
      <th>description</th>
      <th>example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>cat</td>
      <td>–</td>
      <td>显示或连接文件</td>
      <td>cat 01.js</td>
    </tr>
    <tr>
      <td>more</td>
      <td>–</td>
      <td>查看比价大的文件，可翻页，Q退出后，且查看的内容保留在终端</td>
      <td>more 01.js</td>
    </tr>
    <tr>
      <td>less</td>
      <td>–</td>
      <td>查看比较大的文件，可翻页，Q退出后，查看的内容不会保留在终端</td>
      <td>less 01.js</td>
    </tr>
    <tr>
      <td>od</td>
      <td>–</td>
      <td>读取指定文件，并将内容以八进制字码呈现</td>
      <td>od 01.js</td>
    </tr>
    <tr>
      <td>cp</td>
      <td>copy</td>
      <td>复制文件内容 ｜ cp 01.js 02.js</td>
      <td> </td>
    </tr>
    <tr>
      <td>rm</td>
      <td>remove</td>
      <td>删除文件或目录,欲删除目录，需加上-rf参数</td>
      <td>rm -rf dir</td>
    </tr>
    <tr>
      <td>mv</td>
      <td>–</td>
      <td>移动或重命名一个目录或文件（第二个参数文件或目录存在就是移动， 不存在就是重命名）</td>
      <td>mv 01.js 02</td>
    </tr>
    <tr>
      <td>ln</td>
      <td>link</td>
      <td>链接文件或目录</td>
      <td>ln 01.js 04.js</td>
    </tr>
    <tr>
      <td>find</td>
      <td>–</td>
      <td>查找文件或目录</td>
      <td>find . -name ‘*.js’ <a href="#find">详解</a></td>
    </tr>
    <tr>
      <td>open</td>
      <td>–</td>
      <td>使用默认程序打开文件</td>
      <td>open 01.js</td>
    </tr>
  </tbody>
</table>

<p><a name="find"></a></p>

<h3 id="find-命令详解">find 命令详解</h3>

<h4 id="一find-命令语法格式">一、find 命令语法格式</h4>

<p>find[路径][选项][操作]<br />
选项参数对照表</p>

<table>
  <thead>
    <tr>
      <th>选项</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-name</td>
      <td>根据文件名查找</td>
    </tr>
    <tr>
      <td>-perm</td>
      <td>根据文件权限查找</td>
    </tr>
    <tr>
      <td>-prune</td>
      <td>该选项可以排出某些查找目录</td>
    </tr>
    <tr>
      <td>-user</td>
      <td>根据文件属主查找</td>
    </tr>
    <tr>
      <td>-group</td>
      <td>根据文件属组查找</td>
    </tr>
    <tr>
      <td>-minute -n｜+n</td>
      <td>根据文件更改时间查找</td>
    </tr>
    <tr>
      <td>-type</td>
      <td>按文件类型查找</td>
    </tr>
    <tr>
      <td>-size -n｜+n</td>
      <td>按文件大小查找</td>
    </tr>
    <tr>
      <td>-mindepth n</td>
      <td>从n级子目录开始搜索</td>
    </tr>
    <tr>
      <td>-maxdepth n</td>
      <td>最多搜索到n级子目录</td>
    </tr>
  </tbody>
</table>

<h4 id="二常用选型详解">二、常用选型详解</h4>

<p>-name 查找/etc目录下以conf结尾的文件，文件名区分大小写 find /etc -name ‘*.conf’<br />
-iname 同-name,忽略大小写<br />
-user 查找文件所属用户为 zhangsan 的文件 find . -user zhangsan<br />
-group   查找文件所属组为 dev 的所有文件，例如：find . -group dev<br />
-type　　根据类型查找：如下</p>

<p>　　　　　　f　　 文件　　　　　　　　find . -type f</p>

<p>　　　　　　d　　目录　　　　　　　　find . -type d</p>

<p>　　　　　　c　　字符设备文件　　　　find . -type c</p>

<p>　　　　　　b　　块设备文件　　　　　find . -type b</p>

<p>　　　　　　l　　 链接文件　　　　　　find . -type l</p>

<p>　　　　　　p　　管道文件　　　　　　find . -type p</p>

<p>-size　   根据文件大小查询</p>

<p>　　　　  -n　　小于 大小为 n 的文件</p>

<p>　　　　  +n　　大于 大小为 n 的文件</p>

<p>　　　　　举例1：查找 /ect 目录下，小于 10000 字节的文件。 find /etc -size +10000c</p>

<p>　　　　　举例2：查找 /etc 目录下，大于 1M 的文件。find /etc -size -1M</p>

<p>-mtime　　</p>

<p>　　　　　-n　　n 天以内修改的文件。</p>

<p>　　　　　+n　　n 天以外修改的文件。</p>

<p>　　　　　n　　  正好 n天 修改的文件</p>

<p>　　　　　举例1: 查询 /etc 目录下，5天以内修改 且以 conf 结尾的文件。　find /etc -mtime -5 -name ‘*.conf’</p>

<p>　　　　　举例2: 查询 /etc 目录下，10天之前修改，且属于 yangyang 的文件。　　find /etc -mtime +10 -user yangyang</p>

<p>-mmin　　</p>

<p>　　　　　-n　　n 分钟以内修改过的文件</p>

<p>　　　　　+n　　n 分钟之前修改过的文件</p>

<p>　　　　　举例1: 查询 /etc 目录下 30分钟 之前修改过的文件。 　　find /etc -mmin +30</p>

<p>　　　　　举例1: 查询 /etc 目录下 30分钟 之前修改过的目录。 　　find /etc -mmin -30 -type d</p>

<p>-mindepth n　　从第 n 级目录开始搜索</p>

<p>　　　　　举例：从 /etc 的第三级子目录开始搜索。  find /etc -mindepth 3</p>

<p>-maxdepth n　　表示至多搜索到第 n-1 级子目录。</p>

<p>　　　　　举例1: 在 /etc 中搜索符合条件的文件，但最多搜索到 2级 子目录。　　find /etc -maxdepth 3 -name ‘*.conf’</p>

<p>　　　　　举例2: find /etc -type f -name ‘*.conf’ -size +10k -maxdepthc 2</p>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="terminal" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-09-28T16:16:38+08:00</published><updated>2022-09-28T16:16:38+08:00</updated><id>http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/09/28/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Vim</title><link href="http://localhost:4000/2022/09/28/vim.html" rel="alternate" type="text/html" title="Vim" /><published>2022-09-28T00:00:00+08:00</published><updated>2022-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2022/09/28/vim</id><content type="html" xml:base="http://localhost:4000/2022/09/28/vim.html"><![CDATA[<p>–
layout: post
title: Mac OS 环境变量配置
date: 2022-09-28
description: …..
img: post-6.jpg # Add image post (optional)
tags: [Blog, vscode]
author: wangzm
–</p>

<ul>
  <li>终端输入 vim ~/.bash_profile</li>
  <li>输入 i 进入编辑模式，然后输入环境变量：</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="dl">"</span><span class="s2">$M2_HOME/bin:$PATH</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>编辑完成后，按 Esc 退出编辑，输入 :wq! 保存并退出</li>
  <li>输入 source .bash_profile 使环境变量生效</li>
  <li>终端输入 echo $PATH 查看当前环境变量，检查添加的变量是否生效</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[– layout: post title: Mac OS 环境变量配置 date: 2022-09-28 description: ….. img: post-6.jpg # Add image post (optional) tags: [Blog, vscode] author: wangzm –]]></summary></entry><entry><title type="html">Vscodetool</title><link href="http://localhost:4000/2022/05/12/vsCodeTool.html" rel="alternate" type="text/html" title="Vscodetool" /><published>2022-05-12T00:00:00+08:00</published><updated>2022-05-12T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/12/vsCodeTool</id><content type="html" xml:base="http://localhost:4000/2022/05/12/vsCodeTool.html"><![CDATA[<p>–
layout: post
title: vscode 实用插件记录
date: 2022-05-12
description: …..
img: post-6.jpg # Add image post (optional)
tags: [Blog, vscode]
author: wangzm
–</p>]]></content><author><name></name></author><summary type="html"><![CDATA[– layout: post title: vscode 实用插件记录 date: 2022-05-12 description: ….. img: post-6.jpg # Add image post (optional) tags: [Blog, vscode] author: wangzm –]]></summary></entry><entry><title type="html">快速访问 GitHub</title><link href="http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520.html" rel="alternate" type="text/html" title="快速访问 GitHub" /><published>2022-05-12T00:00:00+08:00</published><updated>2022-05-12T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520</id><content type="html" xml:base="http://localhost:4000/2022/05/12/SwitchHostsAndGitHub520.html"><![CDATA[<ul>
  <li>下载 <a href="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md">SwitchHosts</a></li>
  <li>配置添加 Hosts
https://cdn.jsdelivr.net/gh/521xueweihan/GitHub520
<img src="/assets/img/github-hosts.png" alt="配置host" /></li>
  <li>使用时打开即可
<img src="/assets/img/github-open.png" alt="打开" /></li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="github" /><summary type="html"><![CDATA[SwitchHost 和 GitHub520 自动更新 github.com hosts]]></summary></entry><entry><title type="html">GIT RESET 操作</title><link href="http://localhost:4000/2019/10/17/gitReset-%E6%93%8D%E4%BD%9C.html" rel="alternate" type="text/html" title="GIT RESET 操作" /><published>2019-10-17T00:00:00+08:00</published><updated>2019-10-17T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/17/gitReset%20%E6%93%8D%E4%BD%9C</id><content type="html" xml:base="http://localhost:4000/2019/10/17/gitReset-%E6%93%8D%E4%BD%9C.html"><![CDATA[<h1 id="git-撤销">git 撤销</h1>

<ul>
  <li>git Add
git restore –staged <文件>..." 以取消暂存</文件></li>
  <li>git commit
    <ul>
      <li>git commit 未 push, 可用 git commit –amend 修改提交信息</li>
      <li>git reset HEAD^ 或 git reset HEAD~1</li>
    </ul>
  </li>
  <li>git push
    <ul>
      <li>git revert XXXXXX[git commit id] 生成一个与要撤销的 commit 相反的一个 commit，提交上去即可，安全。</li>
      <li>git reset [版本号] –hard 会抛弃当前工作区域的修改， –soft 会回退到之前的版本，保留当前工作区域的修改。
再 git push origin [分支名] –force 覆盖掉远端的版本信息，使远端的仓库也回退相应版本</li>
    </ul>
  </li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="git" /><summary type="html"><![CDATA[.....]]></summary></entry><entry><title type="html">vue-cli 3代码压缩去掉 console.log 信息</title><link href="http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin.html" rel="alternate" type="text/html" title="vue-cli 3代码压缩去掉 console.log 信息" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin</id><content type="html" xml:base="http://localhost:4000/2018/09/28/uglifyjs-webpack-plugin.html"><![CDATA[<p>默认的 vue-cli 3 配置项，打包的 JS 代码，并不会去掉 console 信息，经过查文档，终于搞定。
增加 vue.config.js 的配置项， 使用 uglifyjs-webpack-plugin 压缩代码.此处调试的时候要记得清除浏览器缓存，否则可能已经配置正确了，因为浏览器的缓存机制导致看到的效果不正确。</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">uglifyjs</span><span class="o">-</span><span class="nx">webpack</span><span class="o">-</span><span class="nx">plugin</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
<span class="c1">// vue.config.js </span>
<span class="nx">cosnt</span> <span class="nx">UglifyJsPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">uglify-webpack-plugin</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">// 增加 configureWebpack， 该对象会被 webpack-merge 合并入最终的 webpack 配置</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">configureWebpack</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">optimization</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">minimizer</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">UglifyJsPlugin</span><span class="p">({</span>
          <span class="na">uglifyOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">compress</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">warnings</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
              <span class="na">drop_console</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span><span class="c1">//console</span>
              <span class="na">pure_funcs</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">console.log</span><span class="dl">'</span><span class="p">]</span>
            <span class="p">}</span>
          <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>uglifyOptions 配置项看<a href="'https://github.com/mishoo/UglifyJS2#minify-options'">这里</a></li>
  <li>compress 配置项看<a href="'https://github.com/mishoo/UglifyJS2#compress-options'">这里</a></li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="vue-cli" /><summary type="html"><![CDATA[You will find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry><entry><title type="html">git stash</title><link href="http://localhost:4000/2018/09/28/gitstash.html" rel="alternate" type="text/html" title="git stash" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-28T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/28/gitstash</id><content type="html" xml:base="http://localhost:4000/2018/09/28/gitstash.html"><![CDATA[<p>当在一个分支上工作一段时间之后，需要临时切换到其它分支上，但是当前的工作还没完成一个功能点，为了避免增加没有意义的提交信息，可以先把当前工作区域的内容储藏起来，切换到其它分支，完成之后再切换回当前分支。</p>
<ul>
  <li>git stash / git stash save 内容储藏起来。项目回到上次提交完成时候的干净状态。</li>
  <li>git stash  –keep-index 告诉 git 不要存储通过 git add 命令暂存的东西
(不太明白，用起来感觉跟 git stash 一样)</li>
  <li>git stash –include-untracked / git stash -u , 告诉 git 暂存创建的未跟踪的文件</li>
  <li>git stash –patch 交互式提示文件的修改</li>
  <li>git stash branch testChanges 把储藏空间的内容座位一份新的分支处理，处理完成之后可以把储藏空间的内容清除掉</li>
  <li>git stash list 查看储存空间的列表</li>
  <li>git stash pop 把储存空间最新的一次存储取出来</li>
  <li>git stash apply stash@{0} 取出指定的储存信息</li>
  <li>git stash drop stash@{0} 把指定的储存从栈里清除</li>
  <li>git clean 从工作目录中移除未被追踪的文件,慎重使用，具体使用具体查看文档。
    <ul>
      <li>git clean -d -f 强制移除</li>
      <li>git clean -d -n 做一次演示，告诉你要移除什么</li>
      <li>任何与 .gitignore 或其它忽略文件相匹配的文件都不会被移除。如果这些文件也想要移除， git clean -d -n -x</li>
    </ul>
  </li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="git" /><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry><entry><title type="html">webpack proxyTable 代理转发配置</title><link href="http://localhost:4000/2018/09/25/proxyTable.html" rel="alternate" type="text/html" title="webpack proxyTable 代理转发配置" /><published>2018-09-25T00:00:00+08:00</published><updated>2018-09-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/25/proxyTable</id><content type="html" xml:base="http://localhost:4000/2018/09/25/proxyTable.html"><![CDATA[<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">proxyTable</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">target</span><span class="p">:</span> <span class="dl">'</span><span class="s1">www.app1.com:8001</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">changeOrigin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">pathRewrite</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">^/api</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/index/index</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>当请求‘/api/login’,实际上请求的是‘www.app1.com:8001/index/index/login’</li>
</ul>]]></content><author><name>wangzm</name></author><category term="wx" /><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry><entry><title type="html">puppeteer 完成极验验证</title><link href="http://localhost:4000/2018/09/10/puppeteer.html" rel="alternate" type="text/html" title="puppeteer 完成极验验证" /><published>2018-09-10T00:00:00+08:00</published><updated>2018-09-10T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/10/puppeteer</id><content type="html" xml:base="http://localhost:4000/2018/09/10/puppeteer.html"><![CDATA[<p><a href="https://github.com/wangzm123/resource/blob/master/index.js">源码点击这里</a>
<!-- TOC --></p>

<ul>
  <li><a href="#安装puppeteer">安装puppeteer</a></li>
  <li><a href="#项目中使用的基本api">项目中使用的基本API</a>
    <ul>
      <li><a href="#puppeteerlaunch">puppeteer.launch</a></li>
      <li><a href="#page">page</a></li>
      <li><a href="#mouse">mouse</a></li>
    </ul>
  </li>
  <li><a href="#核心代码的实现与原理">核心代码的实现与原理</a></li>
</ul>

<!-- /TOC -->

<h1 id="安装puppeteer">安装puppeteer</h1>
<ul>
  <li>执行cnpm install puppeteer</li>
  <li>puppeteer 所有的操作基本都是异步的，所以需要使用 async, await</li>
</ul>

<h1 id="项目中使用的基本api">项目中使用的基本API</h1>
<h2 id="puppeteerlaunch">puppeteer.launch</h2>
<ul>
  <li>puppeteer.launch 启动 Chromium 实例</li>
  <li>puppeteer.launch(options)
    <ul>
      <li>headless  无头模式</li>
      <li>slowMo 调整 puppeteer 的操作速度，以便在调试阶段可以看清楚发生了什么</li>
      <li>devtools 打开控制台</li>
    </ul>
  </li>
</ul>

<h2 id="page">page</h2>
<ul>
  <li>browser.newPage() 创建 page 实例</li>
  <li>page.setViewPort() 设置页面的大小，一个 browser 实例可以有多个 page 实例， page 实例可是设置各自的大小</li>
  <li>page.setJavaScriptEnavled() 设置页面是否禁用JS</li>
  <li>page.goto() 页面导航</li>
  <li>page.type(selector, value[,options]) selector 要输入元素的选择器，value 要输入的值，options.delay 输入没个字符的间隔，默认为0.每个字符的输入都会触发keydown, keypress/input,keyup 事件</li>
  <li>page.waitFor() 根据入参不同，效果也不同。
    <ul>
      <li>入参为 string, 认为是 css 选择器或者 xpath, 根据是否包含‘//’进行判断， 为page.waitForSelector 或者 page.waiteForXPath 的缩写</li>
      <li>入参为 function, 是 page.waitForFunction 的缩写</li>
      <li>入参为 number，是认为是超时时间，在指定时间后返回 resolve</li>
    </ul>
  </li>
  <li>page.$eval(selector, function[,…args])
    <ul>
      <li>selector 为选择器</li>
      <li>funciton 为在浏览器实例上下执行的方法</li>
      <li>…args 为给 fucntion 传的参数</li>
    </ul>
  </li>
  <li>page.evalute(function[,…args])
    <ul>
      <li>function 在页面实例上下文中执行的方法</li>
      <li>…args 传给function 的参数</li>
      <li>返回 function 的执行结果</li>
    </ul>
  </li>
</ul>

<h2 id="mouse">mouse</h2>
<ul>
  <li>通过 page.mouse 创建 mouse 实例， 该实例是在相对于窗口左上角， 基于 css 像素运行的。即具体操作的时候，要制定当前操作的位置</li>
  <li>mouse.click(X, Y[,options])
    <ul>
      <li>X, Y 为要点击的位置，</li>
      <li>options</li>
    </ul>
  </li>
  <li>mouse.down([options])</li>
  <li>mouse.move(X, Y[,options])
    <ul>
      <li>X,Y 为要移动到的位置</li>
      <li>options.steps 控制移动的速度</li>
    </ul>
  </li>
  <li>mouse.up([options])</li>
</ul>

<h1 id="核心代码的实现与原理">核心代码的实现与原理</h1>
<ul>
  <li>极验图片验证的原理是 canvas 两个图层，完整的背景图片（img1），一个是带缺口的图片(img2)。我们需要拿到 img2 的缺口位置，操作鼠标拖动至这个位置即可。
    <ul>
      <li>计算图片位置： 获取 img1, img2 的每个相同像素点的颜色，比较颜色差异，差异较大的视为可能存在的位置
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">evalute</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">img1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.geetest_canvas_fullbg</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">img2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.geetest_canvas_bg</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">piexDifrence</span> <span class="o">=</span> <span class="mi">30</span>
<span class="kd">let</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">260</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="mi">160</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ctx1</span> <span class="o">=</span> <span class="nx">img1</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">).</span><span class="nx">getImageData</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">ctx2</span> <span class="o">=</span> <span class="nx">img2</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">).</span><span class="nx">getImageData</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">data1</span> <span class="o">=</span> <span class="nx">ctx1</span><span class="p">.</span><span class="nx">data</span>
    <span class="kd">const</span> <span class="nx">data2</span> <span class="o">=</span> <span class="nx">ctx2</span><span class="p">.</span><span class="nx">data</span>
    <span class="kd">const</span> <span class="nx">res1</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">data1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">data2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="kd">const</span> <span class="nx">res2</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">data1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">data2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="kd">const</span> <span class="nx">res3</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">data1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">data2</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">res1</span> <span class="o">&gt;</span> <span class="nx">piexDifrence</span> <span class="o">&amp;&amp;</span> <span class="nx">res2</span> <span class="o">&gt;</span> <span class="nx">piexDifrence</span> <span class="o">&amp;&amp;</span> <span class="nx">res3</span> <span class="o">&gt;</span> <span class="nx">piexDifrence</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="cm">/** 此最大值最小值需调试*/</span>
<span class="k">return</span> <span class="p">{</span><span class="na">min</span><span class="p">:</span> <span class="nx">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="nx">res</span><span class="p">[</span><span class="nx">res</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span><span class="mi">50</span><span class="p">}</span>
<span class="p">})</span>
</code></pre></div>        </div>
      </li>
      <li>模拟用户操作，拖动图片
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.geetest_slider_button</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">()</span>
<span class="cm">/** 得到的原始点为按钮的左上角，要调整到按钮的中间，确保点击有效*/</span>
<span class="kd">const</span> <span class="nx">startX</span> <span class="o">=</span> <span class="nx">start</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">10</span>
<span class="kd">const</span> <span class="nx">startY</span> <span class="o">=</span> <span class="nx">start</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">10</span>
<span class="cm">/** 获取移动距离的数组*/</span>
<span class="kd">const</span> <span class="nx">distance</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">calculateDistance</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">targetX</span> <span class="o">=</span> <span class="nx">startX</span> <span class="o">+</span> <span class="nx">distance</span><span class="p">.</span><span class="nx">min</span>
<span class="kd">const</span> <span class="nx">targetY</span> <span class="o">=</span> <span class="nx">startY</span>
<span class="cm">/** 此处操作要尽可能的模拟用户操作，不可直接把图片拉到指定位置，否则会失败*/</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">startX</span><span class="p">,</span> <span class="nx">startY</span><span class="p">,</span> <span class="p">{</span><span class="na">delay</span><span class="p">:</span> <span class="mi">2000</span><span class="p">})</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">down</span><span class="p">()</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">targetX</span> <span class="o">+</span> <span class="mi">30</span><span class="p">,</span> <span class="nx">targetY</span><span class="p">,</span> <span class="p">{</span><span class="na">steps</span><span class="p">:</span> <span class="mi">20</span><span class="p">})</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">waitFor</span><span class="p">(</span><span class="mi">800</span><span class="p">)</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">targetX</span><span class="p">,</span> <span class="nx">targetY</span><span class="p">,</span> <span class="p">{</span><span class="na">steps</span><span class="p">:</span> <span class="mi">30</span><span class="p">})</span>
</code></pre></div>        </div>
      </li>
      <li>判断拉动图片的结果，处理返回的错误信息
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">evalute</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">isSuccess</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.geetest_success_animate</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">isFinish</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.geetest_radar_tip_content</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHtml</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">尝试过多</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
<span class="cm">/**此处可定义多种错误*/</span>
<span class="p">})</span>
<span class="k">return</span> <span class="nx">result</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>wangzm</name></author><category term="Blog" /><category term="puppeteer" /><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes.]]></summary></entry></feed>